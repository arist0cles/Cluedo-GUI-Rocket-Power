package core;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

import squares.Square;

/**
 * A custom implementation of a JPanel. Used to draw the Cluedo grid.
 * 
 * @author Patrick and Kirita
 *
 */
public class GridPanel extends JPanel {
	private final int WIDTH = 290;
	private final int HEIGHT = 280;
	private final int GAP = 10;
	private final Color GRID_COLOR = new Color(255, 255, 255);
	private Board board;

	public GridPanel(Board board) {
		this.board = board;
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		drawGrid(g);
	}

	/**
	 * Calls draw squares and then draws the grid as an overlay over them.
	 * 
	 * @param g
	 */
	public void drawGrid(Graphics g) {
		drawSquares(g);
		g.setColor(GRID_COLOR);
		drawGridlines(g, 40, 30, WIDTH, HEIGHT, true);
		drawGridlines(g, 40, 30, WIDTH, HEIGHT, false);

	}

	/**
	 * Takes care of the nitty gritty of drawing the grid lines
	 * 
	 * @param g the graphics object
	 * @param x1 starting x
	 * @param y1 staring y
	 * @param x2 finishing x
	 * @param y2 finishing y
	 * @param drawAcross True when drawing across the X axis, false when drawing down
	 * the Y axis
	 */
	public void drawGridlines(Graphics g, int x1, int y1, int x2, int y2, boolean drawAcross) {
		for (int i = 0; i <= 25; i++) {
			if (drawAcross) {
				g.drawLine(x1, y1, x1, HEIGHT);
				x1 += GAP;
			} else {
				g.drawLine(x1, y1, WIDTH, y1);
				y1 += GAP;
			}
		}
	}

	/**
	 * Takes care of the nitty gritty of drawing the squares. Calls the draw on the
	 * Square objects which have overridden draws which take care of drawing themselves
	 * 
	 * @param g Graphics object
	 */
	public void drawSquares(Graphics g) {
		for (int i = 0; i < 25; i++) {
			for (int j = 0; j < 25; j++) {
				Square[][] squares = board.getSquares();
				int xLocation = 40 + j * 10;
				int yLocation = 30 + i * 10;
				squares[j][i].setGraph(g);
				squares[j][i].draw(xLocation, yLocation, new Color(0, 10, 10));
			}
		}
	}
}
