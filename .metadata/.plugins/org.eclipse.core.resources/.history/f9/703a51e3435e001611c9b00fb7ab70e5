package core;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.GridLayout;

/**
 * The view the user see. Part of the Model View Controller pattern, displays the state dynamically
 * 
 * The view renders the contents of a model. It specifies exactly how the model data should be presented. 
 * If the model data changes, the view must update its presentation as needed. This can be achieved by 
 * using a push model, in which the view registers itself with the model for change notifications, 
 * or a pull model, in which the view is responsible for calling the model when it needs 
 * to retrieve the most current data.
 * 
 * @author Patrick and Kirita
 *
 */
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

public class View extends JFrame {
	private static final long serialVersionUID = 1L;
	private JPanel middleTopPanel = new GridPanel();
	private JPanel middleBottomPanel = new JPanel();
	private JPanel middlePanel = new JPanel();
	private JPanel leftPanel = new JPanel();
	private JPanel rightPanel = new JPanel();
	private BorderLayout layout = new BorderLayout(10, 10);
	private Board board;

	public View(Board board) {
		setupFrame();
		setupPanels();
		this.board = board;
	}
	
	/**
	 * Sets up the JFrame, the main section of the program
	 */
	public void setupFrame(){
		this.setSize(700, 700);
		this.setLayout(layout);
		this.setTitle("Cluedo");
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setVisible(true);
	}

	/**
	 * Sets up the center panel, which is divided into two subpanels,
	 * middleTopPanel and middleBottomPanel
	 */
	public void setupPanels() {
		setupMiddlePanels();
		setupSidePanels(new Color(0, 0, 0), leftPanel, new EmptyBorder(100, 80, 10, 80), BorderLayout.EAST);
		setupSidePanels(new Color(0, 0, 0), rightPanel, new EmptyBorder(100, 80, 10, 80), BorderLayout.WEST);
	}
	
	/**
	 * Sets up all the middle panels
	 */
	public void setupMiddlePanels(){
		this.add(middlePanel, BorderLayout.CENTER);
		GridLayout g = new GridLayout(2, 1);
		middleBottomPanel.setBackground(new Color(0, 255, 0));
		//middleBottomPanel.setBorder(new EmptyBorder(0, 0, 350, 350));
		JTextField j  = new JTextField("hello");
		middleBottomPanel.add(j, BorderLayout.CENTER);
		middleTopPanel.setBorder(new EmptyBorder(0, 0, 350, 350));
		middlePanel.add(middleTopPanel, BorderLayout.NORTH);
		middlePanel.add(middleBottomPanel, BorderLayout.SOUTH);
	}
	
	/**
	 * Sets up the side panels.
	 * 
	 * @param startingColor Basic Bitch Black
	 * @param panel The panel to be setup. 
	 * @param e An emptyborder object, to make sure the panels start with a predetermined size
	 * @param layoutPosition Either the left or the right, which are called east or west
	 */
	public void setupSidePanels(Color startingColor, JPanel panel, EmptyBorder e, String layoutPosition){
		this.add(panel, layoutPosition);
		panel.setBorder(e);
		panel.setBackground(startingColor);
	}
	
	

}
